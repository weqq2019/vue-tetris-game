# 提交规范

创建格式良好的提交，使用 conventional commit 消息格式和表情符号。

## 功能特性：
- 默认运行提交前检查 (代码检查、构建、生成文档)
- 如果没有暂存文件，自动暂存文件
- 使用带有描述性表情符号的 conventional commit 格式
- 建议为不同关注点拆分提交

## 使用方法：
- `/commit` - 带有提交前检查的标准提交
- `/commit --no-verify` - 跳过提交前检查

## 提交类型：
- ✨ feat: 新功能
- 🐛 fix: Bug 修复
- 📝 docs: 文档更改
- ♻️ refactor: 重构代码，不改变功能
- 🎨 style: 代码格式化、缺少分号等
- ⚡️ perf: 性能改进
- ✅ test: 添加或修正测试
- 🧑‍💻 chore: 工具、配置、维护
- 🚧 wip: 进行中的工作
- 🔥 remove: 删除代码或文件
- 🚑 hotfix: 紧急修复
- 🔒 security: 安全性改进

## 执行流程：
1. 检查暂存的更改 (`git status`)
2. 如果没有暂存更改，审查并暂存适当的文件
3. 运行提交前检查 (除非使用 --no-verify)
4. 分析更改以确定提交类型
5. 生成描述性提交消息
6. 如果适用，包含作用域：`type(scope): description`
7. 包含Issue编号（如果存在）：`type(scope): description #issue-number`
8. 为复杂更改添加正文，解释为什么这样做
9. 执行提交
10. 排除 Claude 共同作者信息

## 提交消息格式：
```
<emoji> <type>(<scope>): <description> #issue-number

[optional body]

[optional footer(s)]
```

### 示例：
- `✨ feat(auth): add user authentication system #123`
- `🐛 fix: resolve memory leak in data processing #456`
- `📝 docs: update API documentation #789`
- `♻️ refactor(utils): optimize date formatting functions #101`

## 最佳实践：
- 保持提交原子性和专注性
- 使用祈使语气 ("Add feature" 而不是 "Added feature")
- 解释为什么，而不仅仅是做了什么
- **推荐包含Issue编号**：便于跟踪和管理
- 将不相关的更改拆分为单独的提交

## 新手指导：
- 🎯 **学习目标**: 养成标准化提交习惯
- 📚 **重点理解**: 每种提交类型的使用场景
- 🔍 **关注要点**: 提交消息要清晰描述改动目的
- 💡 **进阶技巧**: 学会使用 scope 让提交更精确