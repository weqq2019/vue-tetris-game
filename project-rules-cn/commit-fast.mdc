# 快速提交任务

基于暂存的更改生成 3 个提交消息建议，然后自动使用第一个建议，无需用户确认。

遵循 conventional commit 格式，使用适当的表情符号，创建解释更改目的的描述性消息。跳过手动消息选择步骤以简化提交流程。

## 执行步骤：
1. 运行 `git status` 查看暂存的更改
2. 生成 3 个遵循 conventional commit 格式的提交消息建议
3. 如果存在相关Issue，自动包含编号格式：`type: description #issue-number`
4. 自动选择第一个建议
5. 使用所选消息执行 `git commit -m`
6. 提交中排除 Claude 共同作者信息

## 提交类型：
- ✨ feat: 新功能
- 🐛 fix: Bug 修复  
- 📝 docs: 文档更改
- ♻️ refactor: 重构代码
- 🧑‍💻 chore: 工具和维护
- 🎨 style: 代码格式化、缺少分号等
- ⚡️ perf: 性能改进
- ✅ test: 添加或修正测试

## 提交消息示例：
- `📝 docs: fix typo in README #101`
- `🎨 style: format code with prettier #401`
- `🐛 fix: resolve minor UI alignment issue #501`
- `🔧 chore: update dev dependencies #401`
- `✅ test: add unit test for utils #601`

## 使用场景：
- 📄 **文档更新**: 小幅文档修改和完善
- 🔧 **配置调整**: 开发工具和环境配置
- 🎨 **样式优化**: CSS、格式化等非功能性修改
- 🐛 **小型修复**: 简单的 bug 修复
- 🧪 **实验代码**: 原型开发和功能测试

## 新手注意事项：
- ⚠️ **建议慎用**: 新手应优先使用标准提交流程学习
- 📚 **学习目标**: 理解不同提交类型的使用时机
- 🎯 **适用时机**: 确信更改简单且风险较低时使用
- 💡 **成长路径**: 熟练掌握标准流程后再使用快速提交

## 与标准提交的区别：
- ⚡ **速度**: 无需确认，直接执行
- 🔍 **检查**: 跳过预检查流程
- 🎯 **适用**: 小范围、低风险更改
- 📈 **学习**: 建议新手先掌握标准流程