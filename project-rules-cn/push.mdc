# 一键推送

执行完整的 Git 工作流：自动暂存、提交、推送所有更改到远程仓库。

## 功能特性：
- 自动暂存所有未提交的更改 (`git add .`)
- 生成带有描述性表情符号的 conventional commit 格式
- 自动推送到远程仓库 (`git push`)
- 支持 issue 编号关联
- 适合快速开发和小型修改

## 使用方法：
- `/push` - 自动执行完整工作流 包含 issue 编号的完整工作流

## 执行流程：
1. 检查工作区状态 (`git status`)
2. 自动暂存所有更改 (`git add .`)
3. 分析更改内容，确定提交类型
4. 生成带有描述性表情符号的 conventional commit 格式
5. 执行提交 (`git commit -m "消息"`)
6. 推送到远程仓库 (`git push`)
7. 显示操作结果
8. 排除 Claude 共同作者信息

## 提交消息格式：
```
<emoji> <type>(<scope>): <description> #issue-number
```

### 格式示例：
- `✨ feat(auth): add user registration system #301`
- `🐛 fix(api): resolve data validation error #501`
- `📝 docs(readme): update installation guide #101`
- `🎨 style(ui): improve button hover effects #201`
- `🔧 chore(deps): upgrade webpack to v5 #401`

## 提交类型：
- ✨ feat: 新功能
- 🐛 fix: Bug 修复
- 📝 docs: 文档更改
- ♻️ refactor: 重构代码，不改变功能
- 🎨 style: 代码格式化、缺少分号等
- ⚡️ perf: 性能改进
- ✅ test: 添加或修正测试
- 🧑‍💻 chore: 工具、配置、维护
- 🚧 wip: 进行中的工作
- 🔥 remove: 删除代码或文件
- 🚑 hotfix: 紧急修复
- 🔒 security: 安全性改进

## 适用场景：
- 🚀 **快速开发**: 频繁的小修改和调试
- 📝 **文档更新**: README、注释、说明文档
- 🐛 **小型修复**: 简单的 bug 修复
- 🎨 **样式调整**: CSS、格式化等非逻辑修改
- 🔧 **配置修改**: 开发环境和工具配置

## 安全检查：
- 检查远程仓库连接状态
- 确认当前分支推送权限
- 避免推送包含敏感信息的文件
- 自动检查提交消息格式规范

## 与其他命令对比：

| 命令 | 功能 | 检查级别 | 适用场景 |
|------|------|----------|----------|
| `/commit` | 提交 | 完整预检查 | 重要功能开发 |
| `/commit-fast` | 快速提交 | 基础检查 | 实验性修改 |
| `/push` | 一键推送 | 中等检查 | 日常开发流程 |

## 注意事项：
- ⚠️ **谨慎使用**: 确保更改已经过基本测试
- 📋 **issue关联**: 建议总是包含相关 issue 编号
- 🔍 **代码审查**: 重要功能建议先用 `/commit` 详细检查
- 🌿 **分支管理**: 确认在正确的分支上操作

## 新手提醒：
- 🎯 **建议**: 新手用户建议先熟练掌握 `/commit` 流程
- 📚 **学习**: 理解每个步骤的作用和意义
- ⚡ **效率**: 熟练后使用此命令提高开发效率